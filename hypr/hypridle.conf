#general {
    # lock_cmd = notify-send "lock!"          # dbus/sysd lock command (loginctl lock-session) 
    # unlock_cmd = notify-send "unlock!"      # same as above, but unlock
    # before_sleep_cmd = notify-send "Zzz"    # command ran before sleep
    # after_sleep_cmd = notify-send "Awake!"  # command ran after sleep
 #   ignore_dbus_inhibit = false             # whether to ignore dbus-sent idle-inhibit requests (used by e.g. firefox or steam)
}

# Screenlock
#listener {
#    timeout = 180                            # in seconds
#    on-timeout = hyprlock # command to run when timeout has passed
    # on-resume = notify-send "Welcome back to your desktop!"  # command to run when activity is detected after timeout has fired.
}

# Suspend
#listener {
  #  timeout = 300                            # in seconds
 #   on-timeout = systemctl suspend # command to run when timeout has passed
    # on-resume = notify-send "Welcome back to your desktop!"  # command to run when activity is detected after timeout has fired.
#}



general {
    lock_cmd = pidof hyprlock || hyprlock           # avoid starting multiple hyprlock instances.
    before_sleep_cmd = loginctl lock-session        # lock before suspend.
    after_sleep_cmd = hyprctl dispatch dpms on      # to avoid having to press a key twice to turn on the display.
}

listener {
    timeout = 180                              
    on-timeout = loginctl lock-session              # lock screen when timeout has passed
}

listener {
    timeout = 190                                
    on-timeout = hyprctl dispatch dpms off          # screen off when timeout has passed
    on-resume = hyprctl dispatch dpms on            # screen on when activity is detected after timeout has fired.
}

listener {
    timeout = 3600                                
    on-timeout = systemctl suspend                  # suspend pc
}
